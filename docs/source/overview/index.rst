Overview
========

Grond can be run as a command line tool or by calling its library functions
from a Python script.

The command line tool offers several subcommands. To find out what subcommands
are available, run ::

	grond --help

To get more information about any of the available subcommands and its options,
try ::

	grond <subcommand> --help

The basic work-flow when using Grond is as follows:

* Set up a project folder containing input data and Green's functions.
* Set up a configuration file for Grond.
* Check the set-up with the  ``grond check`` subcommand.
* Run the optimiser/inversion using the ``grond go`` subcommand.
* Generate a report and plot results with ``grond report``.

Some details on these steps are given in the following sections.

Project folder layout
---------------------

To use Grond with your data and the medium model of your choice, we suggest the
following folder structure. Single files listed here are explained below.

.. code-block :: sh

    ├── config
    │   ├── laquila.gronf
    │   ├── ...
    │   :
    │
    ├── data
    │   └── events  # several events could be set up here
    │       ├── laquila2009   # example for the 2009 L'Aquila event
    │       │   ├── event.txt
    │       │   ├── insar      # contains kite-prepared InSAR-data
    │       │   │   ├── dsc_LAquila2009_Envisat.npz
    │       │   │   └── dsc_LAquila2009_Envisat.yml
    │       │   ├── waveforms  # contains seismic waveforms and meta data
    │       │   │   ├── raw    # raw downloaded data
    │       │   │   │   └── 2009-04-06_MW6.3_Central_Italy.421793.seed
    │       │   │   └── stations.xml
    │       │   └── gnss
    │       │       └── gnss.yml
    │       :
    │
    └── gf_stores  # contains Green's function stores for near-field data
        ├── Abruzzo_Ameri_nearfield
        :   └── ...

TODO: add runs, reports, sinnvolleres Beispiel

Input data
----------

Grond can combine different observational input data in an inversion.

**Seismic waveform data**

Required input files are:

* raw waveform data (Mini-SEED format or other formats supported by `Pyrocko`_)
* instrument response information (StationXML format)

Various tools exists to download raw waveforms and instrument response
information from `FDSN web services`_ (`here is a basic Python script example
<https://pyrocko.org/docs/current/library/examples/fdsn_download.html>`_).
Grond can use continuous data (recommended) as well as event-based cut-outs. If
event-based data is used, make sure that the time windows are long enough.
Generously enlarge the window before and after the signal to be analysed. Add
at least 5 times the longest period to be analysed to both sides. Add more if
pre-event noise should be analysed for data-weighting.


**InSAR data**

For preparing and incorporating InSAR data see the `Kite`_ documentation.
`Kite`_ is an interactive tool for inspection and transport of static
displacement maps. It can be used for data noise estimations, easy quadtree
data sub-sampling and calculation of data error variance-covariance matrices
for proper data weighting.

Required input files are ``kite_scene.yml`` and ``kite_scene.npz`` which can be
generated by `Kite`_.


**GNSS data**

Required input file is a simple `YAML`_ file containing GNSS station positions,
displacement values and measurement uncertainties (example :download:`gnss.yaml
<../files/gnss.yaml>`).

TODO: Link to Pyrocko GNSS docs

Green's functions
-----------------

A Pyrocko Green's function (GF) store is needed that stores GFs for many
possible source-receiver configurations. You can either download from the
online repository (`online GF databases`_) or compute them with the `fomosto`_
module of `Pyrocko`_. Depending on the application, different set-ups of GF
stores or methods for calculation are suitable:

.. _fomosto: https://pyrocko.org/docs/current/apps/fomosto/index.html


**GFs for global teleseismic waveform data**

For the point-source analysis of large global earthquakes, a global GF store
with a sampling frequency of 0.5 Hz may suffice. Such a store can be downloaded
with Fomosto, using

::

    fomosto download kinherd global_2s store

**GFs for regional and local seismic waveform data**

Regional analyses may require region-specific GF stores. Given a suitable
1D-layered velocity model, GF stores can be built with the `Fomosto QSEIS
backend`_.

**GFs for near-field static displacement data (InSAR, GNSS)**

Near-field static displacements require GF stores with high spatial sampling
and mostly only little temporal sampling. With the `Fomosto PSGRN/PSCMP
backend`_, you can build your on GF store for any given local 1D-layered
velocity model.

Terminology
-----------


Event
    A seismic event which has a unique name among other events available to a
    specific configuration of Grond. An event usually has a preliminary origin
    and sometimes a reference mechanism attached to it.

Config file
    A file, by convention ending with the suffix ``.gronf``, containing a Grond
    configuration. The config file can be made to work with multiple events.

Rundir
    The run directory, by convention ending with the suffix ``.grun``, where
    Grond stores intermediate and final results during an optimisation. The
    rundir is created by Grond when running the ``grond go`` subcommand.

Dataset
    The dataset is a section in the config file telling Grond where to look for
    input data (waveforms, insar scenes, gnss data) and meta-data (station
    coordinates, instrument responses, blacklists, picks, event catalogues).

Misfit
    The misfit is the value of the objective funcion obtained for a concrete
    source model. The global misfit may contain weighted contributions of
    multiple targets in Grond terminology (see below).

* Target
* Problem
* Analyser
* Optimiser
* Engine

Configuration
-------------

TODO: shorten config file example, describe overall structure

You can create an initial Grond configuration file for a centroid moment tensor
optimization based on global seismic waveforms with

.. code-block :: sh

    grond init > config/cmt.gronf

Identically, for static near-field displacement (InSAR, GNSS data sets) and
finite source optimisation set-ups, initial Grond configuration file can be
created with

.. code-block :: sh

    grond init --waveforms > config/.gronf
    grond init --insar > <project>.gronf
    grond init --gnss --insar > <project>.gronf

The ``targets`` (data and misfit setups for seimsic waveforms, InSAR and or GNSS data) can be combined and sources types can be exchanged. A Grond configuration file showing all possible options with their default values is given using:

.. code-block :: sh

    grond init --full > <project>.gronf`

Commented snippets of Grond configuration files explaining all options can be found here for

**Example configurations**

* point-source optimizations based on waveforms: :download:`config_example_waveforms.yaml </../../examples/config_example_waveforms.yaml>`
* finite source optimizations based on InSAR data: :download:`config_example_static.yaml </../../examples/config_example_static.yaml>`


**Configuration file structure**

.. literalinclude :: /../../examples/config_example_static.yaml
    :language: yaml


Optimisation
------------

You may want to check your dataset and configuration file (see suggestions above) and debug
it if needed with the command:

::

	grond check <configfile> <eventname>

Now, you may start the optimization for a given event using

::
	
	grond go <configfile> <eventname>

During the optimization, results are aggregated in an output directory,
referred to as `<rundir>` in the configuration and documentation.

You find detailed information on the misfit configuration and model space
sampling in the Chapter :doc:`/optimisers/index`.


Results and visualisation
-------------------------

Finally, you may run

::

	grond report <rundir>

to aggregate and visualize results to a browsable summary, (by default) under
the directory `reports`.

Please find detailed information on the reports and automatic plots in the
section :doc:`/report/index`.

The results can be exported in various ways by running the subcommand

::

	grond export <what> <rundir>


.. _YAML: http://yaml.org/
.. _Optimisers: ../library/optimisers.html
.. _Result Plots: ./plots_docu.html
.. _Kite: https://pyrocko.org/docs/kite/current/
.. _downloadwave: https://pyrocko.org/docs/current/library/examples/fdsn_download.html
.. _qseis: https://pyrocko.org/docs/current/apps/fomosto/tutorial.html#creating-a-new-green-s-function-store
.. _psgrn: https://pyrocko.org/docs/current/apps/fomosto/tutorial.html#creating-a-new-green-s-function-store
.. _online GF databases: http://kinherd.org:8080/gfws/static/stores/
.. _GF stores: http://kinherd.org:8080/gfws/
.. _Pyrocko: https://pyrocko.org/
.. _Fomosto QSEIS backend: https://pyrocko.org/docs/current/apps/fomosto/backends.html#the-qseis-backend
.. _Fomosto PSGRN/PSCMP backend: https://pyrocko.org/docs/current/apps/fomosto/backends.html#the-psgrn-pscmp-backend
.. _FDSN web services: https://www.fdsn.org/webservices/
